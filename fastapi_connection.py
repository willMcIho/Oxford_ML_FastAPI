# -*- coding: utf-8 -*-
"""FastAPI Connection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1e-8RZBm1_BIVUcLNYxZ43LAcKSBhNzrb
"""

# ✅ Part 1: Install Required Packages
!pip install fastapi uvicorn nest-asyncio pyngrok openai supabase pandas

!ngrok config add-authtoken 2w8kDxVene3pz3Ipoj51LlVtRQ8_6wVLbxETR9RS5VrfYNENZ

# ✅ Part 1: Install Updated Packages
!pip install fastapi uvicorn nest-asyncio pyngrok openai supabase neo4j pandas

# ✅ Part 2: Imports and Setup
import nest_asyncio
from fastapi import FastAPI
from pyngrok import ngrok
import uvicorn
from openai import OpenAI
import pandas as pd
from pydantic import BaseModel
from supabase import create_client
from neo4j import GraphDatabase
from fastapi.middleware.cors import CORSMiddleware

# Your Keys and Configs
SUPABASE_URL = "https://xcgbulcvdjghyqqztmvz.supabase.co"
SUPABASE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InhjZ2J1bGN2ZGpnaHlxcXp0bXZ6Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc0NDIxODMyOSwiZXhwIjoyMDU5Nzk0MzI5fQ.gSDjqB5dx43elJYvI_cFCJj9XqcEWaJqHaNbUpJJoN4"
OPENAI_KEY = "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"
NEO4J_URI = "neo4j+s://086f1e64.databases.neo4j.io"
NEO4J_USER = "neo4j"
NEO4J_PASSWORD = "ydXfAVeS3duWyrNCRyOXQsxeZp3HTCyuOq8c3rG-rPg"

# Initialize clients
openai_client = OpenAI(api_key=OPENAI_KEY)
supabase = create_client(SUPABASE_URL, SUPABASE_KEY)
driver = GraphDatabase.driver(NEO4J_URI, auth=(NEO4J_USER, NEO4J_PASSWORD))

# Initialize FastAPI
app = FastAPI()
nest_asyncio.apply()

# Enable CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # Allow all for now
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# ✅ Part 3: Request Body Model
class QuestionRequest(BaseModel):
    question: str

# ✅ Part 4: Helper - Query Neo4j for a causal path
def find_causal_path():
    with driver.session() as session:
        result = session.run("""
            MATCH p=(start:CausalLearned)-[:CAUSES*1..2]->(end:CausalLearned)
            RETURN start.name AS source, end.name AS target
            LIMIT 5
        """)
        return [(record["source"], record["target"]) for record in result]

# ✅ Part 5: Reasoning Endpoint
@app.post("/ask-ai")
async def ask_ai(req: QuestionRequest):
    user_question = req.question

    # Find a causal path
    causal_edges = find_causal_path()
    if causal_edges:
        causal_summary = " -> ".join([f"{src} -> {tgt}" for src, tgt in causal_edges])
    else:
        causal_summary = "No causal path found."

    # Create enhanced prompt
    full_prompt = f"""
    A user asked the following question about citizen satisfaction services:

    '{user_question}'

    Based on the following learned causal paths:
    {causal_summary}

    Please generate a helpful, clear explanation for the user, ideally connecting the causal paths where relevant.
    """

    # Use OpenAI 1.x new call
    ai_response = openai_client.chat.completions.create(
        model="gpt-4",
        messages=[
            {"role": "system", "content": "You are a helpful public service reasoning expert specializing in citizen satisfaction analysis."},
            {"role": "user", "content": full_prompt}
        ],
        temperature=0.5
    )

    answer_text = ai_response.choices[0].message.content

    return {
        "answer": answer_text,
        "causal_path": causal_edges
    }

# ✅ Part 6: Start Uvicorn and Open API with ngrok
public_url = ngrok.connect(8000)
print("\n✅ Your FastAPI server is live at:", public_url)

uvicorn.run(app, port=8000)